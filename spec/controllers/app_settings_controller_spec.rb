require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AppSettingsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # AppSetting. As you add validations to AppSetting, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {"key" => "MyString"} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AppSettingsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    sign_in
  end

  describe "GET index" do
    it "assigns all app_settings as @app_settings" do
      app_settings = double('app_settings')
      allow(AppSetting).to receive(:all).and_return(app_settings)
      get :index
      expect(assigns(:app_settings)).to equal(app_settings) # Note: it should be called after controller action has been executed
    end
    it "renders the index template" do
      get :index
      expect(response).to render_template("index")
    end
    it "responds successfully" do
      get :index
      expect(response).to be_success
      # expect(response).to have_http_status(200) # Note: it is available in rspec 3
    end
  end

  describe "GET show" do
    before(:each) do
      @id = 'id'
      @app_setting = double('app_settings', :id => @id)
      allow(AppSetting).to receive(:find).with(@id).and_return(@app_setting)
      get :show, {:id => @id}
    end
    it "assigns the requested app_setting as @app_setting" do
      expect(assigns(:app_setting)).to equal(@app_setting)
    end
    it "renders the show template" do
      expect(response).to render_template("show")
    end
    it "responds successfully" do
      expect(response).to be_success
    end
  end

  describe "GET new" do
    before(:each) do
      get :new
    end
    it "assigns a new app_setting as @app_setting" do
      expect(assigns(:app_setting)).to be_a_new(AppSetting)
    end
    it "renders the edit template" do
      expect(response).to render_template("new")
    end
    it "responds successfully" do
      expect(response).to be_success
    end
  end

  describe "GET edit" do
    before(:each) do
      @id = 'id'
      @app_setting = double('app_settings', :id => @id)
      allow(AppSetting).to receive(:find).with(@id).and_return(@app_setting)
      get :edit, {:id => @id}
    end
    it "assigns the requested app_setting as @app_setting" do
      assigns(:app_setting).should equal(@app_setting)
    end
    it "renders the edit template" do
      expect(response).to render_template("edit")
    end
    it "responds successfully" do
      expect(response).to be_success
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new AppSetting with valid attributes and redirects to created app_setting" do
        new_app_setting = AppSetting.new  # Note: we had to use it instead of mock as otherwise we will get undefined 'model_name' method error because of redirect_to @app_setting
        allow(new_app_setting).to receive(:save).and_return(true)
        allow(AppSetting).to receive(:new).and_return(new_app_setting)
        allow_any_instance_of(AppSettingsController).to receive(:app_setting_params).and_return(new_app_setting.attributes)  # Note: here we used 'allow_any_instance_of' method
        expect(AppSetting).to receive(:new)
        expect(new_app_setting).to receive(:save)
        post :create, {:app_setting => new_app_setting.attributes}
        expect(response).to redirect_to(new_app_setting)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved app_setting as @app_setting and renders 'new' template" do
        new_app_setting = AppSetting.new
        allow(new_app_setting).to receive(:save).and_return(false)
        allow(AppSetting).to receive(:new).and_return(new_app_setting)
        allow_any_instance_of(AppSettingsController).to receive(:app_setting_params).and_return(new_app_setting.attributes)  # Note: here we used 'allow_any_instance_of' method
        expect(AppSetting).to receive(:new)
        expect(new_app_setting).to receive(:save)
        post :create, {:app_setting => new_app_setting.attributes}
        expect(response).to render_template('new')
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested app_setting" do

        pending
        app_setting = AppSetting.create! valid_attributes
        # Assuming there are no other app_settings in the database, this
        # specifies that the AppSetting created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        AppSetting.any_instance.should_receive(:update).with({"key" => "MyString"})
        put :update, {:id => app_setting.to_param, :app_setting => {"key" => "MyString"}}, valid_session
      end

      it "assigns the requested app_setting as @app_setting" do
        pending
        app_setting = AppSetting.create! valid_attributes
        put :update, {:id => app_setting.to_param, :app_setting => valid_attributes}, valid_session
        assigns(:app_setting).should eq(app_setting)
      end

      it "redirects to the app_setting" do
        pending
        app_setting = AppSetting.create! valid_attributes
        put :update, {:id => app_setting.to_param, :app_setting => valid_attributes}, valid_session
        response.should redirect_to(app_setting)
      end
    end

    describe "with invalid params" do
      it "assigns the app_setting as @app_setting" do
        pending
        app_setting = AppSetting.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        AppSetting.any_instance.stub(:save).and_return(false)
        put :update, {:id => app_setting.to_param, :app_setting => {"key" => "invalid value"}}, valid_session
        assigns(:app_setting).should eq(app_setting)
      end

      it "re-renders the 'edit' template" do
        pending
        app_setting = AppSetting.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        AppSetting.any_instance.stub(:save).and_return(false)
        put :update, {:id => app_setting.to_param, :app_setting => {"key" => "invalid value"}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested app_setting" do
      pending
      app_setting = AppSetting.create! valid_attributes
      expect {
        delete :destroy, {:id => app_setting.to_param}, valid_session
      }.to change(AppSetting, :count).by(-1)
    end

    it "redirects to the app_settings list" do
      pending
      app_setting = AppSetting.create! valid_attributes
      delete :destroy, {:id => app_setting.to_param}, valid_session
      response.should redirect_to(app_settings_url)
    end
  end

end
